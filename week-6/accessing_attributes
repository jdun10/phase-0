#Attr Methods

# I worked on this challenge by myself.

# I spent 1 hours on this challenge.

# Pseudocode

# Input: provided
# Output: age, name, and occupation (original and altered)
# Steps: code already written

# Your Code Here:
# Release 3:

class Profile
# here is the change, we combined the attr_writer and attr_reader into one declaration: attr_accessor
  attr_accessor :age

  def initialize
    @age = 27
    @name = "Kim"
    @occupation = "Cartographer"
  end

  def print_info
    puts
    puts "age: #{@age}"
    puts
    puts "name: #{@name}"
    puts
    puts "occupation: #{@occupation}"
    puts
  end

  # This code is no longer needed.
  # def what_is_age
  #   @age
  # end

  # This code is no longer needed
  # def change_my_age=(new_age)
  #   @age = new_age
  # end

  def what_is_name
    @name
  end

  def change_my_name=(new_name)
    @name = new_name
  end

  def what_is_occupation
    @occupation
  end

  def change_my_occupation=(new_occupation)
    @occupation = new_occupation
  end


end

instance_of_profile = Profile.new
puts "--- printing age -----"
sleep 0.8
p instance_of_profile.age

puts "--- printing name ----"
sleep 0.8
p instance_of_profile.what_is_name

puts "--- printing occupation ----"
sleep 0.8
p instance_of_profile.what_is_occupation

puts "--- changing profile information ----"
10.times do
  print "."
  sleep 0.1
end

instance_of_profile.age = 28
instance_of_profile.change_my_name = "Taylor"
instance_of_profile.change_my_occupation = "Rare Coins Trader"


puts
puts "---- printing all profile info -----"
sleep 0.8
instance_of_profile.print_info




# Reflection (during work)
#1: The methods are changing the age, name, and occupation that is printed out.
	# They are changed by setting the variables equal to the new input provided.

#2: This did the same thing as before but with one method less. It is a slightly longer program.

#3: This has the same method removed and some of the variables are not repeated/the variables are "replaced" by not being local.
#   This code is simpler and even shorter than the first one.

#4: :age, :name, :occupation

# Reflection (after work)
# What is a reader method?
# => A reader method is something that will retrieve something from the program.

# What is a writer method?
# => A writer method is something that will create an attribute and set it to something in the program.

# What do the attr methods do for you?
# => It allows me to set different characteristics for a variable in each method of a class.

# Should you always use an accessor to cover your bases? Why or why not?
# => No, if the problem has an element of user security to it, then enabling someone to change them could be hazardous.
# => However, if you are certain that being able to change an attribute of the whole program's variables would be helpful, then do it.

# What is confusing to you about these methods?
# => 
